
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000021c  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f6  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ad  00000000  00000000  000004ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000190  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000088  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>
#define F_CPU 1000000UL
int main(void)
{
  DDRA=0xFE;                               //make all pins output except pin0 is input
  6c:	8e ef       	ldi	r24, 0xFE	; 254
  6e:	8a bb       	out	0x1a, r24	; 26
  PORTA|=(1<<0);                          //turn on internal pull_up resistor for pin0 >>"input coming form signal"
  70:	d8 9a       	sbi	0x1b, 0	; 27
	while (1) 
    {
		if(!(PINA&(1<<0)))                         //checking sensor input in pin0
		{
		PORTA|=(1<<2);                            //turn on Buzzer in pin2
  72:	94 e6       	ldi	r25, 0x64	; 100
{
  DDRA=0xFE;                               //make all pins output except pin0 is input
  PORTA|=(1<<0);                          //turn on internal pull_up resistor for pin0 >>"input coming form signal"
	while (1) 
    {
		if(!(PINA&(1<<0)))                         //checking sensor input in pin0
  74:	c8 99       	sbic	0x19, 0	; 25
  76:	fe cf       	rjmp	.-4      	; 0x74 <main+0x8>
		{
		PORTA|=(1<<2);                            //turn on Buzzer in pin2
  78:	da 9a       	sbi	0x1b, 2	; 27
  7a:	89 2f       	mov	r24, r25
		for (unsigned char x =0 ; x<100;x++)      //rotate 90° (closing the gate)
		   {
		   PORTA|=(1<<1);                         //pin1 for motor
  7c:	d9 9a       	sbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	e6 e7       	ldi	r30, 0x76	; 118
  80:	f1 e0       	ldi	r31, 0x01	; 1
  82:	31 97       	sbiw	r30, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <main+0x16>
  86:	00 c0       	rjmp	.+0      	; 0x88 <main+0x1c>
  88:	00 00       	nop
		   _delay_ms(1.5);
		   PORTA&=~(1<<1);
  8a:	d9 98       	cbi	0x1b, 1	; 27
  8c:	e0 e1       	ldi	r30, 0x10	; 16
  8e:	f2 e1       	ldi	r31, 0x12	; 18
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <main+0x24>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x2a>
  96:	00 00       	nop
  98:	81 50       	subi	r24, 0x01	; 1
	while (1) 
    {
		if(!(PINA&(1<<0)))                         //checking sensor input in pin0
		{
		PORTA|=(1<<2);                            //turn on Buzzer in pin2
		for (unsigned char x =0 ; x<100;x++)      //rotate 90° (closing the gate)
  9a:	81 f7       	brne	.-32     	; 0x7c <main+0x10>
  9c:	ff eb       	ldi	r31, 0xBF	; 191
  9e:	27 e2       	ldi	r18, 0x27	; 39
  a0:	39 e0       	ldi	r19, 0x09	; 9
  a2:	f1 50       	subi	r31, 0x01	; 1
  a4:	20 40       	sbci	r18, 0x00	; 0
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x36>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x40>
  ac:	00 00       	nop
  ae:	89 2f       	mov	r24, r25
	
		_delay_ms(3000);                          //delay 3 sec. until we catch the f*ckin. thief
		
		for(unsigned char x =0 ; x<100;x++)       //return back to 0°(opening gate)
		    {
		     PORTA|=(1<<1);
  b0:	d9 9a       	sbi	0x1b, 1	; 27
  b2:	e9 ef       	ldi	r30, 0xF9	; 249
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x4a>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x50>
  bc:	00 00       	nop
		     _delay_ms(1);
		     PORTA&=~(1<<1);
  be:	d9 98       	cbi	0x1b, 1	; 27
  c0:	ed e8       	ldi	r30, 0x8D	; 141
  c2:	f2 e1       	ldi	r31, 0x12	; 18
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x58>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x5e>
  ca:	00 00       	nop
  cc:	81 50       	subi	r24, 0x01	; 1
		   _delay_ms(18.5);
		   }
	
		_delay_ms(3000);                          //delay 3 sec. until we catch the f*ckin. thief
		
		for(unsigned char x =0 ; x<100;x++)       //return back to 0°(opening gate)
  ce:	81 f7       	brne	.-32     	; 0xb0 <main+0x44>
		     PORTA|=(1<<1);
		     _delay_ms(1);
		     PORTA&=~(1<<1);
		     _delay_ms(19);	
		    }	
		PORTA=0;                                 //turn off Buzzer & motor
  d0:	1b ba       	out	0x1b, r1	; 27
  d2:	d0 cf       	rjmp	.-96     	; 0x74 <main+0x8>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
